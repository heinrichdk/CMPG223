@page "/ProjectReport"
@using CMPG223.Controllers
@using CMPG223.Dtos
@using CMPG223.Models
@inject IStockController _stockController;

<h3>Project Report</h3>

@if (hasError)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@ErrorMessage</MudAlert>
}

<select @bind="SelectProjectId">
    <option>Select a Project Number-</option>
    @foreach (var item in projects)
    {
        <option value="@item.ProjectId">@item.ProjectNumber</option>
    }
</select>
<br />
<div style="margin-top:10px">
    <MudButton @onclick="@(GenerateReport)" Variant="Variant.Filled" Color="Color.Primary">Generate Report</MudButton>
</div>
    
<br />
@if (StockC.Count > 0)
{
    <div id="div_print">
<h4>Project Report</h4>
<table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Items Checked out</th>
            <th>Quantity</th>
            <th>Store Manager</th>
            <th>Artisan</th>      
        </tr>
    </thead>
    <tbody>
        @foreach(var item in StockC)
         {
        <tr>
            <td>
                <label>
                    @item.Date.ToShortDateString()
                </label>
            </td>
            <td>
                <label>
                    @item.StockDto.Description
                </label>
            </td>
            <td>
                <label>
                    @item.Qty
                </label>
            </td>
            <td>
                <label>
                    @item.StoreManager.Name @item.StoreManager.Surname
                </label>
            </td>
            <td>
                <label>
                    @item.Artisan.Name @item.Artisan.Surname
                </label>
            </td>
        </tr>
         }

    </tbody>
</table>
</div>
    <div style="float:right; margin-right: 20px">
        <input name="b_print" type="button" class="ipt" onClick="printdiv('div_print');" value=" Print ">
    </div>
}

@code {


    private Guid _selectedProjectNumber;

    private Guid SelectProjectId
    {
        get => _selectedProjectNumber;
        set
        {
            _selectedProjectNumber = value;
            if (value != Guid.Empty)
                _selectedProject = projects.First(x => x.ProjectId == value);
        }
    }

    private ProjectDto _selectedProject;
    private List<StockCheckedOutDto> StockC = new List<StockCheckedOutDto>();
    private List<ProjectDto> projects = new List<ProjectDto>();
    private string ErrorMessage;
    private bool hasError;

    protected override async Task OnInitializedAsync()
    {
        projects = await _stockController.GetProjects();
    }

    private async Task GenerateReport()
    {
        if (SelectProjectId == Guid.Empty)
        {
            DisplayError("Please Validate all inputs");
            return;
        }
        StockC = await _stockController.GetCheckoutStockByProjectId(SelectProjectId);
    }

    private void DisplayError(string error)
    {
        hasError = true;
        ErrorMessage = error;
    }


}